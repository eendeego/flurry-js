// @flow strict

import type {ColorModesType} from './color-modes';
import type {OptimizationModesType} from './optimization-modes';

export type ProgramInfo = {
  program: WebGLProgram,
  attribLocations: {
    vertexPosition: number,
    vertexColor: number,
    textureCoord: number,
  },
  uniformLocations: {
    projectionMatrix: ?WebGLUniformLocation,
    modelViewMatrix: ?WebGLUniformLocation,
    uSampler: ?WebGLUniformLocation,
  },
};

export type SmokeParticleV = {
  color: Float32Array, // floatToVector[4];
  position: Float32Array, // floatToVector[3];
  oldposition: Float32Array, // floatToVector[3];
  delta: Float32Array, // floatToVector[3];
  dead: Uint32Array, // intToVector;
  time: Float32Array, // floatToVector;
  animFrame: Uint32Array, // intToVector;
};

export type SmokeV = {
  p: Array<SmokeParticleV>, // [NUMSMOKEPARTICLES/4];
  nextParticle: number,
  nextSubParticle: number,
  lastParticleTime: number,
  firstTime: number,
  frame: number,
  old: Array<number>, // [3];
  seraphimVertices: Float32Array, // NUMSMOKEPARTICLES*2+1
  seraphimVerticesBuffer: WebGLBuffer,
  seraphimColors: Float32Array, // NUMSMOKEPARTICLES*4+1
  seraphimColorsBuffer: WebGLBuffer,
  seraphimTextures: Float32Array, // [NUMSMOKEPARTICLES*2*4];
  seraphimTexturesBuffer: WebGLBuffer,
  seraphimIndices: Uint16Array, // [NUMSMOKEPARTICLES*3*2];
  seraphimIndicesBuffer: WebGLBuffer,
  programInfo: ProgramInfo,
};

export type Star = {|
  position: Array<number>, // or [number, number, number]
  mystery: number,
  rotSpeed: number,
  ate: number,
|};

export type Spark = {|
  position: Array<number>, // or [number, number, number]
  mystery: number,
  delta: Array<number>, // or [number, number, number]
  color: Array<number>, // or [number, number, number, number]
|};

export type FlurryInfo = {|
  next: ?FlurryInfo,
  currentColorMode: ColorModesType,
  s: SmokeV,
  star: Star,
  spark: Array<Spark>,
  streamExpansion: number,
  numStreams: number,
  flurryRandomSeed: number,
  fTime: number,
  fOldTime: number,
  fDeltaTime: number,
  briteFactor: number,
  drag: number,
  dframe: number,
|};

export type GlobalInfo = {|
  /* system values */
  // glx_context: GLXContext,
  // window: Window,
  gl: WebGLRenderingContext,
  // canvas: HTMLCanvasElement,
  optMode: OptimizationModesType,

  sys_glWidth: number,
  sys_glHeight: number,

  gTimeCounter: number,
  frameCounter: number,
  oldFrameTime: number,

  flurry: ?FlurryInfo,
  texid: WebGLTexture, // GLuint

  // Only used if DRAW_SPARKS is true
  debug?: {
    spark: {
      vertices: Float32Array,
      verticesBuffer: WebGLBuffer,
      programInfo: ProgramInfo,
    },
  },
|};

export type RenderContext = {|
  gl: FlurryInfo,
|};
